--DROP TABLES
DROP TABLE	INFO_LIBRO	CASCADE CONSTRAINTS;
DROP TABLE	LIBROS	CASCADE CONSTRAINTS;
DROP TABLE	SOCIOS	CASCADE CONSTRAINTS;
DROP TABLE PRESTAS CASCADE CONSTRAINTS;



--CREAR TABLA DE INFORMACION SOBRE LIBROS
CREATE TABLE INFO_LIBRO(
    NOM_LIBRO VARCHAR2(30) PRIMARY KEY,
    AUTOR VARCHAR2(30),
    NUM_COPIAS NUMBER(5)
);


--TABLA QUE CONTIENE LIBROS
CREATE TABLE LIBROS(
    COD_LIBRO VARCHAR2(5) PRIMARY KEY,
    NOM_LIBRO VARCHAR2(30),
    DISPONIBLE VARCHAR2(2),
    PRESTADO_POR VARCHAR2(5)
);


--TABLA DE SOCIOS
CREATE TABLE SOCIOS(
    COD_SOCIO VARCHAR2(5) PRIMARY KEY,
    NOM_SOCIO VARCHAR2(30) UNIQUE,
    CARTAS NUMBER(1)
);


--TABLA CONTIENE TODOS LAS PRESTAS OCURRIDOS
CREATE TABLE PRESTAS (
    COD_LIBRO VARCHAR2(5),
    COD_SOCIO VARCHAR2(5),
    FECHA_PRESTAR DATE,
    FECHA_DEVOLVER DATE,
    MONTO_MULTA NUMBER(5),
    ESTADO VARCHAR2(20)
);



--FOREIGN KEYS
--TABLA LIBROS
ALTER TABLE LIBROS
ADD FOREIGN KEY (NOM_LIBRO) REFERENCES INFO_LIBRO(NOM_LIBRO);

--TABLA PRESTAS
ALTER TABLE PRESTAS 
ADD FOREIGN KEY (COD_LIBRO) REFERENCES LIBROS(COD_LIBRO);
ALTER TABLE PRESTAS
ADD FOREIGN KEY (COD_SOCIO) REFERENCES SOCIOS(COD_SOCIO);



--CHECK
--TABLA LIBROS (DISPONIBLE)
ALTER TABLE LIBROS
ADD CONSTRAINT CHECK_DISPONIBLE CHECK (DISPONIBLE IN ('SI', 'NO'));



--INSERTAR--

--INSERT INFO_LIBRO
INSERT INTO INFO_LIBRO VALUES('LIBRO_1', 'SOUFIANE LACHKAR', 3);
INSERT INTO INFO_LIBRO VALUES('LIBRO_2', 'ALICE KELLEN', 2);
INSERT INTO INFO_LIBRO VALUES('LIBRO_3', 'JAVIER CERCAS', 1);
INSERT INTO INFO_LIBRO VALUES('LIBRO_4', 'LA VECINA RUBIA', 3);

--INSERT LIBROS
INSERT INTO LIBROS VALUES('1234A','LIBRO_1', 'SI', 'NADIE');
INSERT INTO LIBROS VALUES('1234B','LIBRO_1', 'SI', 'NADIE');
INSERT INTO LIBROS VALUES('1234C','LIBRO_1', 'SI', 'NADIE');
INSERT INTO LIBROS VALUES('2345A','LIBRO_2', 'SI', 'NADIE');
INSERT INTO LIBROS VALUES('2345B','LIBRO_2', 'SI', 'NADIE');
INSERT INTO LIBROS VALUES('5432A','LIBRO_3', 'SI', 'NADIE');
INSERT INTO LIBROS VALUES('6543A','LIBRO_4', 'SI', 'NADIE');
INSERT INTO LIBROS VALUES('6543B','LIBRO_4', 'SI', 'NADIE');
INSERT INTO LIBROS VALUES('6543C','LIBRO_4', 'SI', 'NADIE');

--INSERT SOCIOS
INSERT INTO SOCIOS VALUES('ABC12', 'ANTONIO BANDERA', 2);
INSERT INTO SOCIOS VALUES('DEF34', 'CARMEN MOLA', 2);
INSERT INTO SOCIOS VALUES('GHI56', 'JAVIER BARDEM', 2);
INSERT INTO SOCIOS VALUES('JKL78', 'LUIS TOSAR', 2);

--INSERT PRESTAS
INSERT INTO PRESTAS VALUES('2345A', 'ABC12', '15-APR-22',	'07-MAY-22', 22, 'DEVUELTO');
INSERT INTO PRESTAS VALUES('2345B', 'DEF34', '17-MAY-22',	'23-MAY-22', 0, 'DEVUELTO');
INSERT INTO PRESTAS VALUES('6543C', 'GHI56', '06-MAY-22',	'20-MAY-22', 15, 'DEVUELTO');









--FUNCIONES--

--FUNCION 1 UNA FUNCION QUE DEVUELVE CUANTAS VECES UN LIBRO HABIA PRESTADO

create or replace FUNCTION NUM_LIBROS(LIBRO VARCHAR2) --NOMBRE LIBRO
RETURN NUMBER IS
    
    NUM_LIBROS NUMBER;
BEGIN
    SELECT COUNT(*) INTO NUM_LIBROS FROM PRESTAS P, LIBROS L WHERE P.COD_LIBRO = L.COD_LIBRO AND L.NOM_LIBRO = LIBRO;
    RETURN NUM_LIBROS;
END NUM_LIBROS;
/




--FUNCION 2 PARA CALCULAR EL TOTAL O LA MEDIA DE LAS MULTAS
CREATE OR REPLACE FUNCTION TOTAL_MULTA(TIPO VARCHAR2) --TOTAL O MEDIA
RETURN NUMBER IS

RES NUMBER;

BEGIN
    
    IF TIPO = 'TOTAL' THEN
        SELECT SUM(MONTO_MULTA) INTO RES FROM PRESTAS;
    ELSE IF TIPO = 'MEDIA' THEN
        SELECT SUM(MONTO_MULTA)/COUNT(MONTO_MULTA) INTO RES FROM PRESTAS;
    END IF;
    END IF;
    RETURN RES;
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('POR FAVOR INTTODUCE (TODO) PARA DEVOLVER EL TOTAL O (MEDIA) PARA DEVOLVER LA MEDIA!');

END TOTAL_MULTA;
/




--FUNCION 3 QUE DEVUELVE EL LIBRO QUE TIENE UN SOCIO
CREATE OR REPLACE FUNCTION LIBRO_SOCIO(CODIGO_SOCIO VARCHAR2)
RETURN VARCHAR2 IS

--CUROSR QUE SELECCIONA LOS LIBROS QUE ESTAN PRESTADOS POR EL SOCIO
CURSOR C_LIBRO IS
SELECT * FROM LIBROS WHERE PRESTADO_POR = CODIGO_SOCIO;
V_LIBRO C_LIBRO%ROWTYPE;

LIBRO VARCHAR2(30) := '';
BEGIN 
    
    --GUARDAR EL NOMBRE DE LOS LIBROS EN LA VARIABLE LIBRO
    FOR V_LIBRO IN C_LIBRO LOOP
            LIBRO := LIBRO ||' '|| V_LIBRO.NOM_LIBRO;
    END LOOP;
    --SI LA VARIABLE CONTIENE LIBROS
    IF LENGTH(LIBRO) > 4 THEN
        RETURN LIBRO;
    --SI NO
    ELSE 
        RETURN 'NO TIENE NINGUN LIBRO';
    END IF;
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'NO TIENE NINGUN LIBRO';
END LIBRO_SOCIO;
/







--PROCEDURES--

--PROCEDURE 1 (PRESTAR LIBROS)
create or replace PROCEDURE PRESTAR(NOMBRE_LIBRO VARCHAR2, CODIGO_SOCIO VARCHAR2)as
   
    CODIGO_LIBRO VARCHAR2(5);
    NUMERO_LIBROS NUMBER;

    --CURSOR PARA SELECCIONAR TODOS EL SOCIO CON EL MISMO CODIGO
    CURSOR SOCIO IS
        SELECT * FROM SOCIOS WHERE COD_SOCIO = CODIGO_SOCIO;
    V_SOCIO SOCIO%ROWTYPE;
    
    
    V_LIBRO LIBROS%ROWTYPE;
    
    
BEGIN
    
    --SI EL SOCIO NO TIENE CARTAS DISPONIBLE
    IF V_SOCIO.CARTAS <= 0 THEN
        DBMS_OUTPUT.PUT_LINE('EL SOCIO NO TIENE CARTAS!');

    --SI EL SOCIO TIENE CARTAS DISPONIBLES
    ELSE
        
        --SELECCIONAR EL NUMERO DE LIBROS DISPONIBLES
        SELECT COUNT(*) INTO NUMERO_LIBROS FROM LIBROS WHERE NOM_LIBRO = NOMBRE_LIBRO AND LIBROS.DISPONIBLE = 'SI';
        
        --SI NO HAY LIBROS DISPONIBLES
        IF NUMERO_LIBROS = 0 THEN
            DBMS_OUTPUT.PUT_LINE('EL LIBRO NO EXISTE!!');
       
        --SI HAY LIBROS DISPONIBLES
        ELSE
            
            --SELECCIONAR UNO DE LOS LIBROS DISPONIBLES
            SELECT COD_LIBRO INTO CODIGO_LIBRO FROM LIBROS WHERE ROWNUM =1 AND NOM_LIBRO = NOMBRE_LIBRO AND DISPONIBLE = 'SI';
            
            --INSERTAR FILA EN LA TABLA PRESTAS QUE GUARDA LA OPERACION
            insert into PRESTAS values(CODIGO_LIBRO,CODIGO_SOCIO,sysdate,sysdate+7,0,'NO_DEVUELTO');
            
            --RESTAR 1 DE LAS CARTAS DEL SOCIO
            update SOCIOS set CARTAS=CARTAS-1 where COD_SOCIO = CODIGO_SOCIO;
            --QUITAR LA DISPONIBILIDAD DEL LIBRO PRESTADO Y AÑADIR EL CODIGO DEL SOCIO EN LA COLUMNA DE PRESTADO_POR
            update LIBROS set DISPONIBLE='NO', PRESTADO_POR = CODIGO_SOCIO where COD_LIBRO = CODIGO_LIBRO;
        end if;
    end if;
  
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('EL SOCIO O LIBRO NO SE INCUENTRA, POR FAVOR ASEGÚRESE DE LOS DATOS INTRODUCIDOS!');     
END PRESTAR;
/






--PROCEDURE 2 (DEVOLVER LIBROS)

CREATE OR REPLACE PROCEDURE DEVOLVER(CODIGO_LIBRO VARCHAR)AS
    V_LIBRO LIBROS%ROWTYPE;

    MULTA NUMBER;

BEGIN
    --SELECCIONAR EL LIBRO QUE DESEA DEVOLVER, A VARIABLE V_LIBRO
    SELECT * INTO V_LIBRO FROM LIBROS WHERE COD_LIBRO = CODIGO_LIBRO;
    
    --SI EL LIBRO YA EXISTE EN LA LIBRERIA Y NO ESTA PRESTADO 
    IF V_LIBRO.DISPONIBLE='SI' THEN
       DBMS_OUTPUT.PUT_LINE('EL LIBRO ESTA DISPONIBLE IN LA LIBRERIA');
    
    --SI NO
    ELSE
        --MODIFICAR LA FECHA DE DEVOLVER EN LA TABLA PRESTAR
        UPDATE PRESTAS SET FECHA_DEVOLVER = SYSDATE WHERE COD_LIBRO = CODIGO_LIBRO AND ESTADO='NO_DEVUELTO';
        
        --CALCULAR CUANTO DIAS CONSERVÓ EL LIBRO
        SELECT FECHA_DEVOLVER - FECHA_PRESTAR INTO MULTA FROM PRESTAS WHERE COD_LIBRO = CODIGO_LIBRO AND ESTADO='NO_DEVUELTO';
        
        --SI CONSERVÓ EL LIBRO MÁS DE UN SEMANA
        IF MULTA > 7 THEN
            
            --MODIFICAR EL MONTO DE MULTA A 7 EUROS Y +1 EURO CADA DIA HA TARDADO
            UPDATE PRESTAS SET MONTO_MULTA = MULTA WHERE COD_LIBRO = CODIGO_LIBRO AND ESTADO='NO_DEVUELTO';
            DBMS_OUTPUT.PUT_LINE('TIENES QUE PAGAR UNA MULTA DE '||MULTA||'EUROS');
        
        END IF;
        --CAMBIAR EL ESTADO DE LA OPERACION A 'DEVUELTO'
        UPDATE PRESTAS SET ESTADO='DEVUELTO' WHERE COD_LIBRO = CODIGO_LIBRO;
        
        --DEVOLVER LA CARTA AL SOCIO
        UPDATE SOCIOS SET CARTAS=CARTAS+1 where COD_SOCIO = V_LIBRO.PRESTADO_POR;
        
        --MODIFICAR LA DISPONIBILIDAD DEL LIBRO A 'SI' EN LA TABLA DE LIBROS
        UPDATE LIBROS SET DISPONIBLE='SI', PRESTADO_POR = 'NADIE' WHERE COD_LIBRO = CODIGO_LIBRO;
    END IF;
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('EL LIBRO NO SE INCUENTRA, POR FAVOR INTRODUCE UN CODIGO DE LIBRO VALIDO!');
           
END DEVOLVER;
/




--PROCEDURE 3 QUE DEVOLVE TODOS LOS LIBROS 
CREATE OR REPLACE PROCEDURE DEVOLVER_TODO AS
    --CURSOR CONTIENE TODOS LOS OPERACIONES QUE ESTAN EN ESTADO (NO_DEVUELTO)
    CURSOR C_OPERACION IS
    SELECT * FROM PRESTAS WHERE ESTADO = 'NO_DEVUELTO';

    V_OPERACION C_OPERACION%ROWTYPE;

    BEGIN
    --DEVOLVER LOS LIBROS USAND LA PROCEDURE DEVOLVER;
    FOR V_OPERACION IN C_OPERACION LOOP
        --DEVOLVER LOS LIBROS 
        DEVOLVER(V_OPERACION.COD_LIBRO);
    END LOOP;
END DEVOLVER_TODO;
/



--PROCEDURE 4 MOSTRAR LIBROS
CREATE OR REPLACE PROCEDURE MOSTRAR_LIBROS AS
CURSOR C_LIBROS IS
SELECT * FROM INFO_LIBRO;
V_LIBROS C_LIBROS%ROWTYPE;

BEGIN
    FOR V_LIBROS IN C_LIBROS LOOP
        DBMS_OUTPUT.PUT_LINE('-----------------------------------');
        DBMS_OUTPUT.PUT_LINE('NOMBRE : '||V_LIBROS.NOM_LIBRO);
        DBMS_OUTPUT.PUT_LINE('AUTOR : '||V_LIBROS.AUTOR);
        DBMS_OUTPUT.PUT_LINE('NUMERO DE COPIAS : '||V_LIBROS.NUM_COPIAS);
        DBMS_OUTPUT.PUT_LINE('VECES PRESTADO : '||NUM_LIBROS(V_LIBROS.NOM_LIBRO));
    END LOOP;
END MOSTRAR_LIBROS;
/

 


--PROCEDURE 5 MOSTRAR SOCIOS
CREATE OR REPLACE PROCEDURE MOSTRAR_SOCIOS AS
CURSOR C_SOCIOS IS
SELECT * FROM SOCIOS;
V_SOCIOS C_SOCIOS%ROWTYPE;

BEGIN
    FOR V_SOCIOS IN C_SOCIOS LOOP
        DBMS_OUTPUT.PUT_LINE('-----------------------------------');
        DBMS_OUTPUT.PUT_LINE('CODIGO : '||V_SOCIOS.COD_SOCIO);
        DBMS_OUTPUT.PUT_LINE('NOMBRE : '||V_SOCIOS.NOM_SOCIO);
        DBMS_OUTPUT.PUT_LINE('CARTAS DISPONIBLES : '||V_SOCIOS.CARTAS);
        DBMS_OUTPUT.PUT_LINE('LIBROS QUE TIENE : '||LIBRO_SOCIO(V_SOCIOS.COD_SOCIO));
    END LOOP;
END MOSTRAR_SOCIOS;
/




--PROCEDURE 6 MOSTRAR TODAS LAS OPERACIONES
CREATE OR REPLACE PROCEDURE MOSTRAR_OPERACIONES AS
CURSOR C_PRESTAS IS
SELECT * FROM PRESTAS;
V_PRESTAS C_PRESTAS%ROWTYPE;

BEGIN
    FOR V_PRESTAS IN C_PRESTAS LOOP
        DBMS_OUTPUT.PUT_LINE('-----------------------------------');
        DBMS_OUTPUT.PUT_LINE('CODIGO DE LIBRO : '||V_PRESTAS.COD_LIBRO);
        DBMS_OUTPUT.PUT_LINE('NOMBRE DE SOCIO: '||V_PRESTAS.COD_SOCIO);
        DBMS_OUTPUT.PUT_LINE('FECHA DE PRESTAR : '||V_PRESTAS.FECHA_PRESTAR);
        DBMS_OUTPUT.PUT_LINE('FECHA DE DEVOLVER : '||V_PRESTAS.FECHA_DEVOLVER);
        DBMS_OUTPUT.PUT_LINE('MONTO DE MULTA : '||V_PRESTAS.MONTO_MULTA);
        DBMS_OUTPUT.PUT_LINE('ESTADO : '||V_PRESTAS.ESTADO);
    END LOOP;
END MOSTRAR_OPERACIONES;
/


